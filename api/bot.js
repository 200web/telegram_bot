import { Telegraf, Markup } from 'telegraf';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import dotenv from 'dotenv';
import { questions } from '../data/questions.js'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã
dotenv.config();

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ —Ç–µ–∫—É—â–µ–º—É —Ñ–∞–π–ª—É –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);

// –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID
const ADMIN_TELEGRAM_ID = '6455431647';

const userSessions = {};
console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞...');

bot.command('start', async (ctx) => {
  try {
    const userId = ctx.from.id;
    const chatId = ctx.chat.id;
    userSessions[userId] = { currentQuestionIndex: 0, chatId: chatId, practiceButtonClicked: false, reminderSent: false };
    console.log('–ö–æ–º–∞–Ω–¥–∞ /start –ø–æ–ª—É—á–µ–Ω–∞');
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    const photoPath = path.resolve(__dirname, '../media/teo.png');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏
    if (!fs.existsSync(photoPath)) {
      throw new Error(`File not found: ${photoPath}`);
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ "–°–ú–û–¢–†–ï–¢–¨ –£–†–û–ö" –∏ "–ü–ï–†–ï–ô–¢–ò –ö –ü–†–ê–ö–¢–ò–ö–ï"
    await ctx.telegram.sendPhoto(chatId, { source: fs.createReadStream(photoPath) }, {
      caption: '<b>–ü—Ä–∏–≤–µ—Ç! –Ø –¢–µ–æ, –∏ —É –º–µ–Ω—è –µ—Å—Ç—å –¥–ª—è —Ç–µ–±—è –∫–ª–∞—Å—Å–Ω—ã–π —Ä–∞–∑–±–æ—Ä! üî•</b>\n\n–°–µ–≥–æ–¥–Ω—è –º—ã –æ—Å–≤–æ–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫—Ä—É—Ç—ã—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π ‚Äì —Å–º–æ—Ç—Ä–∏ —É—Ä–æ–∫ –∏ –¥–∞–≤–∞–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è!',
      parse_mode: 'HTML',
      ...Markup.inlineKeyboard([
        [Markup.button.url('üëâ –°–ú–û–¢–†–ï–¢–¨ –£–†–û–ö üé•', 'https://www.youtube.com/watch?v=GzvRorsZzcU&ab_channel=HannaTsyhankova')],
        [Markup.button.callback('üëâ –ü–ï–†–ï–ô–¢–ò –ö –ü–†–ê–ö–¢–ò–ö–ï ‚úçÔ∏è', 'start_quiz')]
      ])
    });

    // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä –Ω–∞ 5 –º–∏–Ω—É—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    setTimeout(async () => {
      if (!userSessions[userId].practiceButtonClicked && !userSessions[userId].reminderSent) {
        await ctx.telegram.sendMessage(chatId, '<b>–ù—É –∫–∞–∫, –∑–∞–ø–æ–º–Ω–∏–ª –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏?</b>\n\n‚¨ÜÔ∏è–°–∫–æ—Ä–µ–µ –ø–µ—Ä–µ—Ö–æ–¥–∏ –∫ —Ç–µ—Å—Ç—É –∏ –ø—Ä–∏–º–µ–Ω—è–π —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ ‚¨ÜÔ∏è', {
          parse_mode: 'HTML'
        });
        userSessions[userId].reminderSent = true; // –û—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
      }
    }, 300000); // 300000 –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ = 5 –º–∏–Ω—É—Ç

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start:', error);
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞
function askQuestion(chatId, userId) {
  const session = userSessions[userId];

  if (!session) {
    bot.telegram.sendMessage(chatId, 'Session not found. Please start the quiz again with /start.');
    return;
  }

  const questionIndex = session.currentQuestionIndex;
  const questionData = questions[questionIndex];

  if (!questionData) {
    bot.telegram.sendMessage(chatId, 'No more questions available.');
    return;
  }

  console.log(`Sending question ${questionIndex + 1}: ${questionData.question}`);

  // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ options ‚Äî —ç—Ç–æ –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫
  if (!Array.isArray(questionData.options) || questionData.options.length === 0) {
    console.error('Invalid options for question:', questionData);
    bot.telegram.sendMessage(chatId, 'Failed to send the question. Please check the configuration.');
    return;
  }

  bot.telegram.sendPoll(
    chatId,
    questionData.question,
    questionData.options,
    { is_anonymous: false }
  ).catch((error) => {
    console.error('Error sending poll:', error);
    bot.telegram.sendMessage(chatId, 'Failed to send the question. Please try again later.');
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ—á–∫–∞
async function sendVideoNoteExplanation(chatId, videoFileName) {
  const videoPath = path.resolve(__dirname, `../media/${videoFileName}`);
  console.log(`Trying to send video note: ${videoPath}`);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏
  if (!fs.existsSync(videoPath)) {
    console.error(`Video file not found: ${videoPath}`);
    return;
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ—á–∫–∞
  try {
    await bot.telegram.sendVideoNote(chatId, { source: fs.createReadStream(videoPath) });
    console.log(`Video note sent: ${videoPath}`);
  } catch (error) {
    console.error(`Failed to send video note: ${error.message}`);
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É
bot.action('start_quiz', (ctx) => {
  const userId = ctx.from.id;
  const chatId = ctx.chat.id;

  // –û—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "–ü–ï–†–ï–ô–¢–ò –ö –ü–†–ê–ö–¢–ò–ö–ï"
  if (userSessions[userId]) {
    userSessions[userId].practiceButtonClicked = true;
  }

  askQuestion(chatId, userId);
});

// –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç—ã
async function collectUserData(ctx, step) {
  const userId = ctx.from.id;
  const session = userSessions[userId];

  if (!session) {
    console.error('Session not found for user:', userId);
    return;
  }

  switch (step) {
    case 'name':
      session.step = 'contact';
      await bot.telegram.sendMessage(session.chatId, '–í–∞—à–µ –∏–º—è:');
      break;
    case 'contact':
      session.userData = { name: ctx.message.text };
      session.step = 'level';
      await bot.telegram.sendMessage(session.chatId, '–í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏ (Telegram/WhatsApp/etc):');
      break;
    case 'level':
      session.userData.contact = ctx.message.text;
      session.step = 'goal';
      await bot.telegram.sendMessage(session.chatId, '–í–∞—à —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ:');
      break;
    case 'goal':
      session.userData.level = ctx.message.text;
      session.step = 'done';
      await bot.telegram.sendMessage(session.chatId, '–¶–µ–ª—å –∏–∑—É—á–µ–Ω–∏—è/—É–ª—É—á—à–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ:');
      break;
    case 'done':
      session.userData.goal = ctx.message.text;
      await bot.telegram.sendMessage(session.chatId, '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!');
      session.step = null;
      
      // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Telegram –Ω–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç
      const userData = session.userData;
      const message = `
        –ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞:
        –ò–º—è: ${userData.name}
        –ö–æ–Ω—Ç–∞–∫—Ç—ã: ${userData.contact}
        –£—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ: ${userData.level}
        –¶–µ–ª—å: ${userData.goal}
      `;
      await bot.telegram.sendMessage(ADMIN_TELEGRAM_ID, message);
      
      // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets
      await sendToGoogleSheets(userData);
      
      break;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets
async function sendToGoogleSheets(userData) {
  const scriptUrl = 'https://script.google.com/macros/s/AKfycbzaqXytmj8eG2UgSu_F3XAHZPQXBQWsZDUWebtXIMDhLUZv8lkI5gDbFFSlk_u2Se8I/exec'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ URL –≤–∞—à–µ–≥–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Google Apps Script
  const payload = {
    name: userData.name,
    contact: userData.contact,
    level: userData.level,
    goal: userData.goal
  };

  try {
    const response = await fetch(scriptUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(payload)
    });

    const result = await response.json();
    console.log('Data sent to Google Sheets:', result);
  } catch (error) {
    console.error('Error sending data to Google Sheets:', error);
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ–ø—Ä–æ—Å
bot.on('poll_answer', async (ctx) => {
  const pollAnswer = ctx.update.poll_answer;
  if (!pollAnswer || !pollAnswer.user) {
    console.error('Poll answer or user is undefined');
    return;
  }

  const userId = pollAnswer.user.id;
  const session = userSessions[userId];

  if (!session) {
    console.error('Session not found for user:', userId);
    return;
  }

  const questionIndex = session.currentQuestionIndex;
  const questionData = questions[questionIndex];
  const userAnswer = pollAnswer.option_ids[0];

  if (!questionData) {
    console.error('Question data not found for index:', questionIndex);
    return;
  }

  console.log(`User answered question ${questionIndex + 1}:`, questionData.options[userAnswer]);

  const responseMessage = questionData.options[userAnswer] === questionData.correctAnswer
    ? questionData.correctResponse
    : questionData.incorrectResponse;

  await bot.telegram.sendMessage(session.chatId, responseMessage);

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ—á–∫–∞ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
  await sendVideoNoteExplanation(session.chatId, `explanation_${questionIndex + 1}.mp4`);

  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ—á–∫–∞
  setTimeout(() => {
    session.currentQuestionIndex += 1;
    if (session.currentQuestionIndex < questions.length) {
      askQuestion(session.chatId, userId);
    } else {
      setTimeout(async () => {
        await bot.telegram.sendMessage(session.chatId, '<b>–¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω, –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n–¢—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏, –¥–∞–≤–∞–π –ø—Ä–æ–¥–æ–ª–∂–∏–º üëâüèº \n\n–†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ, –∏ —è –ø–æ–¥—Å–∫–∞–∂—É, –∫–∞–∫ —Ç–µ–±–µ –≤—ã–π—Ç–∏ –Ω–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º üöÄ', {
          parse_mode: 'HTML'
        });
        session.step = 'name';
        collectUserData(ctx, session.step);
      }, 2000); // 2 —Å–µ–∫—É–Ω–¥—ã –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∫–≤–∏–∑–∞
    }
  }, 5000); // 5 —Å–µ–∫—É–Ω–¥ –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç—ã
bot.on('text', async (ctx) => {
  const userId = ctx.from.id;
  const session = userSessions[userId];

  if (session && session.step) {
    await collectUserData(ctx, session.step);
  }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch().then(() => {
  console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
}).catch((error) => {
  console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', error);
});

export default async function handler(req, res) {
  if (req.method === 'POST') {
    try {
      await bot.handleUpdate(req.body, res);
      res.status(200).send('OK');
    } catch (error) {
      console.error('Error handling update:', error);
      res.status(500).send('Internal Server Error');
    }
  } else {
    res.status(405).send('Method Not Allowed');
  }
}